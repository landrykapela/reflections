What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository with git init, it creates a .git folder which contains the metadata about the files history. It actually doesn't create any commits though.
	It is important to initialize the repository so that the .git directory is created and you can be allowed to add files to be tracked.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is an intermediary stage holding files added to the repository that are not yet committed. It gives the power to control what goes to the repository from a working directory and eventually a flexibility to reverse a mistaken addition.

How can you use the staging area to make sure you have one commit per logical change?
	Since the staging area is an intemediary stage, we can use git diff --staged to see if there is actually a logical difference between the current version and the most recent commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are much more helpful when we want to create a separate version without affecting the master version. For example creating backups, experimental versions or different language versions.
	The branch can be edited separately and published separately but can also be merged with the master to create a unified version.

How do the diagrams help you visualize the branch structure?
	The diagrams show the commit history in a much clearer way. Since the commit history is not linear, diagrams actually give a full picture.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging two branches together combines the commit history of the combined branches such that all commits are accessible from the same tip.
	The diagram repesentation is helps provide a clear picture of the commit history since commit history is not linear.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Git's Automatic Merging:
		Pros: When you have a long history of commits in multiple files, it becomes tedious to merge manually. With git's capability to track changes it is much easier to identify the origin and tips of the merging branches.
		Cons: Git's automatic merging does not take care of conflicting changes, made in same area
	Manual Branch Merging:
		Pros: When merge conflicts are identified, they can only be resolved manually since Git cannot resolve conflicting changes
		Cons: It requires deeper understanding of every change that was made in every commit in both branches and that can be very tedious